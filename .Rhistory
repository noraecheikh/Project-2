par("lty")
plot(airquality$Wind, airquality$Ozone, equal="n")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC)
f
title(main="Wind and Ozone in NYC")
title(main="Wind and Ozone in NYC")
subset(airquality, Month=="5")
may<-subset(airquality, Month==5)
points(may$Wind, may$Ozone, col="blue", pch=)
?pch
points(may$Wind, may$Ozone, col="blue", pch=2)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=)
?pch
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=c(17, 8), col=c("blue","red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
head(airquality)
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind, data=airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["foumula"]]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=TRUE)
source("plot1.R", local=TRUE)
source(plathtofile("plot1.R"), local=TRUE)
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile())
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myeditt("myLabels.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat|color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
sample(colors, 10)
sample(colors(), 10)
pal<-colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?fun
?rgb
p3<-colorRampPalette(c("blue", "green"), alpah=.5)
p3<-colorRampPalette(c("blue", "green"), alpha(5))
p3<-colorRampPalette(c("blue", "green"), alpha=0.5)
p3(5)
plot(x, y, pch=19, col=rgb(0,.5,.5))
plot(x, y, pch=19, col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal<-(colorRampPalette(cols))
pal<-colorRampPalette(cols)
showMe(pals(3))
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, data=mph)
qplot(displ, hwy, data=mpg)
qlot(displ, hwy, data=mph, color=drv)
qplot(displ, hwy, data=mph, color=drv)
qplot(displ, hwy, data=mpg, color=drv)
qplot(disp, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, faceets=.~drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = .~drv)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point(geom_smooth())
g+geom_point(aes(geom_smooth())
f
g+geom_point(aes(geom_smooth())
g+geom_point(aes(geom_smooth())
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpah=1/2, aes(color=drv))
g+geom_point(aes(color=drv), size=4, alpha=1/2)
g+geom_point(aes(color=drv), labs(title="Swirl Rules1"), labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules1")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "1", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(3,3)
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, dinwidth=18497/30)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, colot=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=smooth, method="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")+ facets(.~cut)
qplot(carat, price, data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoint<-quantile(diamonds$carat, seq(0,1, length=4), na.rm=TRUE)
cutpoints<-quantile(diamonds$carat, seq(0,1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, c(.5,.1))
diamonds$car2<-cut(diamonds$carat, cutpoints
g
diamonds$car2<-cut(diamonds$carat, cutpoints
)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot()+facet_grid(.~cut)
dist(dataFrmae)
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
4
5
abline(h=.05)
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orang", "purple"), pch=3, cex=2, lwd=2)
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(disTmp2, 2, which.min)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newclust2, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
kmo
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", ))
points(kmObj$centers, col=c("black", "red",
"green"))
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*diag*t(matv)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v
svd$v[,1]
svd1$v[,1]
rm(list=ls())
bye()
rm(list=ls())
library("swirl")
swirl()
svd2$v[2,]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-sdfg
scale(svd$u[<1])
scale(svd$u[,1])
a1<-sdv$d[1]*(svd1$u[,1]%*%svd1$v[1,])
a1<-sdv1$d[1]*(svd1$u[,1]%*%svd1$v[1,])
a1<-svd1$d[1]*(svd1$u[,1]%*%svd1$v[1,])
a1<- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myIMage(a1)
myImage(a1)
a2<-(svd1$u[,c(1,2)]*svd1$d[c(1,2)])%*%t(svd1$v[,c(1,2)])
a2<-svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[1:2])
a2<-svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a2<-svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
muImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dim(ssd)
names(last(ssd))
names(ssd[,562:563])
library(datasets)
class(iris)
lm_1<-lm(Sepal.Length~Sepal.Width, iris)
lm_2<-lm(Sepal.Length~Sepal.Width+Petal.Length, iris)
lm_2$r.squated
lm_2
summary(lm_2)$r.squated-summary(lm_1)$r.squared
summary(lm_2)$r.squared
summary(lm_1)$r.squared
summary(lm_1)$r.squared - summary(lm_1)$r.squared
r_2<-summary(lm_2)$r.squared
r_1<-summary(lm_1)$r.squared
r_2-r_1
summary(lm_1)
summary(lm_2)
.8402-.01382
summary(lm_2)$r.squared
summary(lm_1)$r.squared
filepath<-"C:/Users/owner/Documents/ECON 386/Project 2/Project-2"
setwd(filepath)
#call libraries
library(e1071)
library(dplyr)
library(tidyr)
#pull in cleaned data (thanks Nora)
data_0<-read.csv("cleantraining.csv")
#split data into training and testing
set.seed(1234)
trainingRowIndex<-sample(1:nrow(data_0), size = .8*nrow(data_0))
trainingData<-data_0[trainingRowIndex, ]
testData <-data_0[-trainingRowIndex, ]
m1<-svm(classe~., data=trainingData)
pred1<-predict(m1, testData)
library(carret)
library(caret)
?confusionMatrix
confusionMatrix(pred1)
confusionMatrix(pred1, testData$classe)
m2<-svm(classe~.-X, data=trainingData)
pred2<-predict(m2, testData)
confusionMatrix(pred2, testData$classe)
summary(m2)
View(data_0)
m3<-svm(classe~.-X -contains("timestamp"), data=trainingData)
m3<-svm(classe~.-X, data=select(trainingData, -contains("timestamp"))
d
m3<-svm(classe~.-X, data=select(trainingData, -contains("timestamp")))
pred3<-predict(m3, testData)
confusionMatrix(pred3, testData$classe)
unkown<-read.csv("cleantesting.csv")
View(uknown)
View(unkown)
m3<-svm(classe~user_name+cvtd_timestamp), data=trainingData)
m4<-svm(classe~user_name+cvtd_timestamp, data=trainingData)
pred4<-predict(m4, testData)
confusionMatrix(pred4, testData$classe)
m4<-svm(classe~user_name+cvtd_timestamp+raw_timestamp_part_1+raw_timestamp_part_2, data=trainingData)
pred4<-predict(m4, testData)
confusionMatrix(pred4, testData$classe)
data_t<-data_0%>%
select(user_name=="eurico")%>%
select(classe==D)
data_t<-data_0
data_t1<-select(data_t, user_name=="eurico")
names(data_t)
data_t1<-select(data_t, user_name="eurico")
data_t1<-select(data_t, "user_name"=="eurico")
data_t1<-select(data_t, user_name=="eurico")
data_0$user_name
library(dplyr)
data_t<-select(data_0, user_name==eurico
)
data_t<-select(data_0, user_name=eurico)
data_t<-select(data_0, user_name==eurico)
data_t<-filter(data_0, user_name==eurico)
data_t<-filter(data_0, user_name=="eurico")
datat1<-filter(data_t, classe==D)
datat1<-filter(data_t, classe=D)
datat1<-filter(data_t, classe=="D")
dim(datat1)
View(datat1)
hist(datat1$cvtd_timestamp)
hist(datat1$raw_timestamp_part_1)
View(testData)
m4<-svm(classe~user_name+raw_timestamp_part_1, trainingData)
pred4<-predict(m4, testData$classe)
pred4<-predict(pred4, testData$classe)
pred4<-predict(m4, testData)
confusionMatrix(pred4, testData$classe)
hist(data_0$raw_timestamp_part_1)
summary(data_0$classe)
summary(data_0$user_name)
hist(data_0$raw_timestamp_part_2)
hist(data_0$raw_timestamp_part_1*data_0$raw_timestamp_part_2)
data_t2<-filter(data_0, classe=A)
data_t2<-filter(data_0, classe=="A")
data_t2<-filter(testData, classe=="A")
View(data_t2)
data_t3<-filter(testData, classe=="E")
View(data_t3)
m4<-svm(classe~raw_timestamp_part_1, trainingData)
pred4<-predict(m4, testData)
confusionMatrix(pred4, testData$classe)
m4<-svm(classe~cvtd_timestamp, trainingData)
pred4<-predict(m4, testData)
confusionMatrix(pred4, testData$classe)
m2<-svm(classe~.-X, data=trainingData)
pred2<-predict(m2, testData)
summary(m2)
confusionMatrix(pred2, testData$classe)
hist(cvtd_timestamp)
hist(data_0$cvtd_timestamp)
data_j<-filter(data_0, user_name=="jeremy")
summary(data_j$classe)
hist(data_j$raw_timestamp_part_1)
hist(filter(data_0, classe=="A"), raw_timestamp_part_1)
hist(filter(data_0, classe=="A")$raw_timestamp_part_1)
summary(filter(data_0, classe=="A")$user_name)
hist(filter(data_0, classe=="A" & username=="jeremy")$raw_timestamp_part_1)
hist(filter(data_0, classe=="A" & user_name=="jeremy")$raw_timestamp_part_1)
mean(filter(data_0, classe=="A" & user_name=="jeremy")$raw_timestamp_part_1)
mean(data_0$raw_timestamp_part_1)
rm(list=ls())
install.packages("rpart")
install.packages("rpart")
filepath<-"C:/Users/owner/Documents/ECON 386/Project 2/Project-2"
setwd(filepath)
#call libraries
library(e1071)
library(dplyr)
library(tidyr)
library(caret)
library(rpart)
#pull in cleaned data (thanks Nora)
data_0<-read.csv("cleantraining.csv")
unkown<-read.csv("cleantesting.csv")
#split data into training and testing
set.seed(1234)
trainingRowIndex<-sample(1:nrow(data_0), size = .8*nrow(data_0))
trainingData<-data_0[trainingRowIndex, ]
testData <-data_0[-trainingRowIndex, ]
names(trainingData)
m2<-rpart(classe~user_name+cvtd_timestamp, data = trainingData, method = class)
m2<-rpart(classe~.-X, data = trainingData, method = class)
m2<-rpart(classe~.-X, data = trainingData, method = class)
install.packages("randomForrest")
install.packages("randomForest")
library(randomForest)
m2<-randomForest(classe~., trainingData, ntree=50, norm.votes=F)
pred2<-predict(m2, testData)
confusionMatrix(pred2, testData$classe)
m2<-randomForest(classe~.-X, trainingData, ntree=50, norm.votes=F)
pred2<-predict(m2, testData)
confusionMatrix(pred2, testData$classe)
summary(m2)
guess1<-predict(m2, unknown)
unkown<-read.csv("cleantesting.csv")
guess1<-predict(m2, unknown)
filepath<-"C:/Users/owner/Documents/ECON 386/Project 2/Project-2"
setwd(filepath)
#call libraries
library(e1071)
library(dplyr)
library(tidyr)
library(caret)
library(rpart)
#pull in cleaned data (thanks Nora)
data_0<-read.csv("cleantraining.csv")
unkown<-read.csv("cleantesting.csv")
#levels
levels.time <- levels(cleantraining$cvtd_timestamp) #create vector of the levels of the cvtd_timestamp
levels(cleantesting$cvtd_timestamp) <- levels.time #change the levels of cvtd_timestamp in the testing set to match the training set
levels.window <- levels(cleantraining$new_window) #do the same for the new_window variable
levels(cleantesting$new_window) <- levels.window
#split data into training and testing
set.seed(1234)
trainingRowIndex<-sample(1:nrow(data_0), size = .8*nrow(data_0))
trainingData<-data_0[trainingRowIndex, ]
testData <-data_0[-trainingRowIndex, ]
#create and run a support vector machine with all variables (except X)
m1<-svm(classe~.-X, data=trainingData)
pred1<-predict(m2, testData)
confusionMatrix(pred2, testData$classe)
#95% accuracy
#Run a randomForest using only person and time
m2<-randomForest(classe~.-X, trainingData, ntree=50, norm.votes=F)
pred2<-predict(m2, testData)
confusionMatrix(pred2, testData$classe)
#99.8% accuracy
#Make guess on unknown data
guess1<-predict(m2, unknown)
guess1<-predict(m2, unknown)
unknown<-read.csv("cleantesting.csv")
guess1<-predict(m2, unknown)
rm(list=rm())
rm(list=ls())
cleantraining <- read.csv("cleantraining.csv") #load the clean training set
cleantesting <- read.csv("cleantesting.csv") #load the clean testing set
levels.time <- levels(cleantraining$cvtd_timestamp)
levels(cleantesting$cvtd_timestamp) <- levels.time
levels.window <- levels(cleantraining$new_window)
levels(cleantesting$new_window) <- levels.window
set.seed(1234)
trainingRowIndex<-sample(1:nrow(cleantraining), size = .7*nrow(cleantraining))
trainingData1<-cleantraining[trainingRowIndex, ]
testData1 <-cleantraining[-trainingRowIndex, ]
install.packages(e1071)
install.packages("e1071")
library(e1071)
model.nc <- best.svm(classe~.-X , data = trainingData1, cost = 2^(2:8),  kernel = "radial")
model.nc <- svm(classe~.-X , data = trainingData1)
pred1<-predict(model.nc, testData1)
confusionMatrix(pred1, testData1$classe)
guess1<-predict(model.nc, cleantesting)
guess1
rm(list = ls())
filepath<-"C:/Users/owner/Documents/ECON 386/Project 2/Project-2"
setwd(filepath)
#call libraries
library(e1071)
library(caret)
library(randomForest)
#pull in cleaned data (thanks Nora)
cleantraining<-read.csv("cleantraining.csv")
cleantesting<-read.csv("cleantesting.csv")
#levels
levels.time <- levels(cleantraining$cvtd_timestamp) #create vector of the levels of the cvtd_timestamp
levels(cleantesting$cvtd_timestamp) <- levels.time #change the levels of cvtd_timestamp in the testing set to match the training set
levels.window <- levels(cleantraining$new_window) #do the same for the new_window variable
levels(cleantesting$new_window) <- levels.window
set.seed(1234)
trainingRowIndex<-sample(1:nrow(cleantraining), size = .8*nrow(cleantraining))
trainingData<-cleantraining[trainingRowIndex, ]
testData <-cleantraining[-trainingRowIndex, ]
m2<-randomForest(classe~.-X, trainingData, ntree=50, norm.votes=F)
pred2<-predict(m2, testData)
confusionMatrix(pred2, testData$classe)
guess1<-predict(m2, cleantesting)
guess1
